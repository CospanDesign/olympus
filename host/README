Host Side communication with an olympus image

The host side communication is broken up into two directores:

  kernelland: drivers that are installed in the kernel. Accessing devices 
              through this method will create native devices that are
              indestiguishable from devices that are truely connected
              to your computer. These devices will show up in your
              /dev directory as well as your /sys directory.


  userland:   all drivers are written in userland, devices will not show
              up in your /dev or your /sys. The only way to interface
              with these devices are with scripts/programs specifically
              written for olympus



  using kernalland vs userland drivers:

    kernelland pros:

    Native applications that are designed to work with existing 
    devices will work with olympus devices.

    For example:
      using a usb serial device inside of Linux simply requires
      'screen', 'kermit' or other well defined applications. If 
      the user uses the kernelland drivers then those same
      programs can be used to interact with olympus based UART
      as though it was natively attached to the host computer

    kernelland cons:

    Very difficult to debug! developers creating a new device/driver/core 
    should not use kernelland drivers. Only devices/drivers/cores that 
    are well defined and have been 'vetted' through the userland drivers
    should be used with kernelland drivers

    userland pros:

    very unlikely that users can crash their Linux box with a userland
    driver

    great for debugging a core and prototyping. For the most part many
    users can use the userland drivers solely

    userland cons:

    scripts/programs must be written to interface with the olympus cores


Directory Structure:
  
  kernelland: base directory for drivers that are installed within the kernel
              this portion is VERY experimental

  userland: base directory for drivers that are used in userland
    drivers: peripheral drivers used to control a specific core that is found
             on an olympus image. some of the current drivers include
                -GPIO
                -SPI
                -UART
                -I2C

    dionysus: contains the concrete implementation of the olympus driver for 
              dionysus board

  userland_devices: scripts to exercise devices that are controlled through
    userland drivers. Some of the devices that are included are
      -pmod_led: PMOD organic LED
      -sdcard_shield: control the SD card sheild from seeed studio


To run an userland_device script:
  1. Load a core with the specified core into the olympus board
  2. run userland_devices/<script_name> host_interface
    -the host interface can be 'dionysus' or 'uart'
