#! /usr/bin/python

#Distributed under the MIT licesnse.
#Copyright (c) 2011 Dave McCoy (dave.mccoy@cospandesign.com)

#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in 
#the Software without restriction, including without limitation the rights to 
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
#of the Software, and to permit persons to whom the Software is furnished to do 
#so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all 
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
#SOFTWARE.

""" OLED

Facilitates communication with the OLED core independent of communication
medium

For more details see:

http://wiki.cospandesign.com/index.php?title=Wb_spi

"""

__author__ = 'dave.mccoy@cospandesign.com (Dave McCoy)'

import time

from array import array as Array

import olympus
import dionysus

import spi
import gpio
import sys

#GPIOs
DATA_COMMAND_MODE = 2
RESET             = 3
VBAT_ENABLE       = 4
VDD_ENABLE        = 5

#SS bit
SLAVE_SELECT_BIT  = 0

#COMMANDS
CONTRAST          = Array('B', [0x81, 0x00])
EN_CHARGE_PUMP    = Array('B', [0x8D, 0x14])
DIS_CHARGE_PUMP   = Array('B', [0x8D, 0x10])

PRE_CHARGE_PER    = Array('B', [0xD9, 0x00])

COMM_SEQ          = Array('B', [0xDA, 0x20])

RESUME_FROM_RAM   = Array('B', [0xA4])
RESUME_DISPLAY    = Array('B', [0xA5])
NON_INVERT_DISPLAY= Array('B', [0xA6])
INVERT_DISPLAY    = Array('B', [0xA7])
DISPLAY_OFF       = Array('B', [0xAE])
DISPLAY_ON        = Array('B', [0xAF])
SET_LOW_ADDRESS   = Array('B', [0x00])
SET_HIGH_ADDRESS  = Array('B', [0x10])
SET_START_LINE    = Array('B', [0x40])


#Device Constants
DISPLAY_SIZE      = 512
PAGE_MAX          = 4
COL_MAX           = 128
ROW_MAX           = 32

FONT_LENGTH       = 8
USER_MAX          = 0x20
FONT_USER_MAX     = USER_MAX * FONT_LENGTH


#drawing mode
DRAW_SET          = 0
DRAW_OR           = 1
DRAW_AND          = 2
DRAW_XOR          = 3

CD_IMAGE          = Array('B', [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x00, 0x40,
0x80, 0x60, 0x10, 0x04, 0x01, 0x01, 0x08, 0x00, 0x01, 0x03, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x10, 0x10, 0x10, 0x00,
0x80, 0xC0, 0x40, 0xC0, 0x80, 0x00, 0x80, 0x40, 0x40, 0x40, 0x00, 0xC0, 0x40, 0x40, 0x40, 0x80,
0x00, 0x00, 0x40, 0x40, 0x40, 0x80, 0x00, 0xC0, 0xC0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0xF0, 0x10, 0x10, 0x30, 0x60, 0xC0, 0x00, 0x80, 0x40, 0x40, 0xC0, 0x00, 0x00, 0xC0, 0x40,
0x40, 0x00, 0x00, 0xD0, 0x00, 0x80, 0xC0, 0x40, 0x40, 0xC0, 0x00, 0x00, 0xC0, 0x40, 0x40, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xC0, 0x80, 0x00, 0x20, 0x00, 0x80, 0xC0, 0x70, 0x1C, 0x06,
0x01, 0x04, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x08, 0x08, 0x08, 0x00,
0x07, 0x0C, 0x08, 0x0C, 0x07, 0x00, 0x09, 0x09, 0x0A, 0x0E, 0x00, 0x3F, 0x08, 0x08, 0x08, 0x07,
0x00, 0x06, 0x09, 0x09, 0x09, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0x08, 0x08, 0x0C, 0x06, 0x03, 0x00, 0x07, 0x09, 0x09, 0x09, 0x00, 0x00, 0x09, 0x09,
0x0F, 0x00, 0x00, 0x0F, 0x00, 0x07, 0x2C, 0x28, 0x28, 0x1F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
])


FOR_RENT_IMAGE  = Array ('B', [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0E, 0x32, 0xC0, 0x32, 0x0E, 0x02, 0x00, 0xE0,
0x10, 0x10, 0x10, 0x10, 0x10, 0xE0, 0x00, 0x10, 0xF0, 0x00, 0x00, 0x10, 0xF0, 0x00, 0x00, 0x10,
0x10, 0xF0, 0x20, 0x10, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C,
0x22, 0x22, 0x22, 0x22, 0x22, 0xC4, 0x00, 0x00, 0x10, 0x10, 0xF2, 0x00, 0x00, 0x00, 0x00, 0xE0,
0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x00, 0x10, 0xF0, 0x20, 0x10, 0x10, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x22, 0x20, 0x22, 0xFE, 0x02, 0x00, 0xE0,
0x50, 0x50, 0x50, 0x50, 0x50, 0x60, 0x00, 0x10, 0x10, 0xF0, 0x20, 0x10, 0x10, 0x20, 0x00, 0xE0,
0x50, 0x50, 0x50, 0x50, 0x50, 0x60, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01,
0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x01, 0x02, 0x02, 0x01, 0x03, 0x02, 0x00, 0x02,
0x02, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x02, 0x02, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00,
0x09, 0x09, 0x09, 0x09, 0x07, 0x00, 0x00, 0x02, 0x03, 0x02, 0x00, 0x02, 0x03, 0x02, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x02, 0x00, 0x02, 0x03, 0x02, 0x00, 0x01,
0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01,
0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

])

class OLED:
  """OLED

  communicates with PMOD OLED device
  """
  def __init__(self, oly, spi_dev_index, gpio_dev_index):
    self.o = oly

    self.gpio = gpio.GPIO(oly, gpio_dev_index)
    self.spi = spi.SPI(oly, spi_dev_index)
    self.bitmap = Array('B', CD_IMAGE)
    #self.bitmap = Array('B')
    #for i in range (0, DISPLAY_SIZE):
    #  self.bitmap.append(0xFF)

    #self.bitmap[0] = 0x80
    #self.bitmap[-1] = 0x01

    #set up spi
    self.spi.set_spi_clock_rate(1000000)
    self.spi.set_tx_polarity(False)
    self.spi.set_rx_polarity(True)
    self.spi.set_spi_slave_select(SLAVE_SELECT_BIT, True)
    self.spi.set_auto_ss_control(True)
    self.spi.set_character_length(8)

    #set up GPIO
    self.gpio.set_port_direction(0xFFFFFFFF)
    self.set_command_mode()
    self.disable_vbat()
    self.disable_vdd()
    time.sleep(.001)

  def power_up(self):
   
    print "power_up"

    print "enable vdd"
    self.enable_vdd()
    time.sleep(.001)

    #disable the display
    self.send_command(Array('B'), [0xAE])
    
    print "reset"
    self.reset()


    #set the charge pump and set pre-charge period command
    self.send_command(Array('B', [0x8D]))
    self.send_command(Array('B', [0x14]))

    self.send_command(Array('B', [0xD9]))
    self.send_command(Array('B', [0xF1]))

    #turn on VCC
    print "enable vbat"
    self.enable_vbat()
    time.sleep(.1)
    
    #invert the display
    self.send_command(Array('B', [0xA1]))
    self.send_command(Array('B', [0xC8]))

    #set the command to select sequential COMM cofiguration
    self.send_command(Array('B', [0xDA]))
    self.send_command(Array('B', [0x20]))

    #enable the display
    self.send_command(Array('B', [0xAF]))

  def reset(self):
    print "resetting...",
    self.gpio.set_bit_value(RESET, 0)
    time.sleep(.01)
    self.gpio.set_bit_value(RESET, 1)
    print "done!"

  def set_data_mode(self):
    self.gpio.set_bit_value(DATA_COMMAND_MODE, 1)

  def set_command_mode(self):
    self.gpio.set_bit_value(DATA_COMMAND_MODE, 0)

  def enable_vbat(self):
    #drive low to enable
    self.gpio.set_bit_value(VBAT_ENABLE, 0)

  def disable_vbat(self):
    #drive high to disable
    self.gpio.set_bit_value(VBAT_ENABLE, 1)

  def enable_vdd(self):
    #drive low to enable
    self.gpio.set_bit_value(VDD_ENABLE, 0)

  def disable_vdd(self):
    #drive high to disable
    self.gpio.set_bit_value(VDD_ENABLE, 1)

  def send_command(self, command, length=8, debug = False):
    #self.set_command_mode()
    self.spi.set_character_length(8)
    self.spi.set_write_data(command)
    self.spi.start_transaction()
    while self.spi.is_busy():
      print ".",
      time.sleep(0.01)


  def clear_buffer(self):
    for i in range(0, len(self.bitmap)):
      self.bitmap[i] = 0x00


  def update(self):
    column_index = 0
    for i in range (0, 4):
      self.set_command_mode()
      #set the page command
      self.send_command(Array('B', [0x22]))
      self.send_command(Array('B', [i]))
      #cmd = 0xB0 | (0x0F & i)
      #self.send_command(Array('B', [cmd]))

      #start from the left column
      self.send_command(Array('B', [0x00]))
      self.send_command(Array('B', [0x10]))

      self.set_data_mode()
      #print "writing column: %d" % i
      self.put_buffer(i)
     

  def put_buffer(self, column_index):
    for i in range ((column_index * 128), ((column_index * 128) + 128)):
      self.send_command(Array('B', [self.bitmap[i]]))
      
  def clear_buffer(self):
    for i in range (0, DISPLAY_SIZE):
      self.bitmap[i] = 0x00


  def clear_screen(self):
    self.clear_buffer()
    self.update()

  def draw_pixel(self, x, y, on):
    x_remain = x % 8
    x_loc = x / 8

    bit = 1 << x_remain

    y_loc = y * 16

    print "x location: %d" % x_loc
    print "y location: %d" % y_loc

    byte_address = y_loc + x_loc
    print "byte address: %d" % byte_address
    if on:
      self.bitmap[byte_address] = self.bitmap[byte_address] | (bit & 0x0FF)

    else:
      self.bitmap[byte_address] = self.bitmap[byte_address] & (~(bit & 0x0FF))

      

if __name__ == "__main__":
  dyn = dionysus.Dionysus()
  dyn.ping()
  dyn.read_drt()
  gpio_index = 0
  spi_index = 0
  num_devices = dyn.get_number_of_devices()
  for dev_index in range (0, num_devices):
    device_id = dyn.get_device_id(dev_index)
    dev_offset = dyn.get_device_address(dev_index)

    if device_id == 1:
      gpio_index = dev_offset

    if device_id == 4:
      spi_index = dev_offset

  if (gpio_index == 0) and (spi_index == 0):
    print "Couldn't find the ID of both devices"
    sys.exit(1)

  print "Found both devices, starting OLED"
  print "GPIO Index: %d" % gpio_index
  print "SPI index: %d" % spi_index
  oled = OLED(dyn, spi_index, gpio_index)

  oled.power_up()

#  oled.clear_screen()

  #oled.draw_pixel(32, 16, True)
  oled.update()

   
