Project: Olympus

Goal: Simplifiy both generation of HDL and interactions with FPGAs. 

FPGA are extremely flexible.
They can be used to:
	-Communicate with sensors that employ a variety of protocols including I2C, UART, SPI etc...
	-Read images from cameras and write to LCD screens
	-Interface with memory devices
	-Exchange data with a processor

Unfortunately FPGA require a lot of resources and knowledge before one can get the coveted initial "blinky" analogy up and running. Not only does one need to know about the physical constraints of an FPGA but understand how it interacts with a hardware description language.

What Olympus is NOT:

-A general FPGA development environment
-A platform for soft core processors. There are may projects that already do that including OpenCores and Papilion.
-Used to develop stand alone FPGA platforms, independent of the host


What Olympus is:

-A flexible I/O peripheral expansion for a host.
	-This host can be a desktop computer a laptop an embedded processor or even a microcontroller
-A platform to build interfaces to complex sensors.
	-Cameras
	-LCD screens


Description: The suite is split into three subgroups

cbuilder (Core Builder): Generates individual cores to interface with a sensor, IC, or process an algorithm.
	-there are tools and scripts provided to simplify the process of synthesizing and simulating a verilog modules
	-the cores are used by ibuilder to generate FPGA images that will call on a created core in a predefined manner.
		-For example: perhaps a sensor simply requires an I2C interface. The user can specify this in the metadata and the host will
		read this metadata and use either a python script or even a kernel driver to interface with this device

ibuilder (Image Builder): Generates FPGA images

Host: Host interface scripts


