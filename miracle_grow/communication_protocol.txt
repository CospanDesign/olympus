Version: 0.0.4
	-added:
		-write streaming consecutive addresses (good for block type devices)
		-write streaming same address (good for character devices)
		-read streaming consecutive addresses (good for block type devices)
		-read streaming same address (good for character devices)
		-write/read master command flags
			-Not sure what kind of flags would be good for the master
		-write/read interrupt control data
			-Not sure how this should be implemented, but I know I'll need it

	-I think the read/write master commands, and interrupt controller should have a lower number

Version: 0.0.3
	-added initial master mode commands, its still under debate whether things should be flags, or numeric representation

Version: 0.0.2
	-changed response ID character from 'F' to 'S' because F is a HEX number

Version: 0.0.1
	-initial version


Wishbone Host interface

Master Commands
	-Ping the host
		-Command:
			C: 0x00000000
			A: 0xXXXXXXXX
			D: 0xXXXXXXXX
		-Response:
			S: 0xFFFFFFFF
			A: 0x00000000
			D: 0x00001EAF
				
	-Write the data to the memory location provided
		-Command:
			C: 0x00000001
			A: 0x????????
			D: 0x????????
		-Response:
			S: 0xFFFFFFFE
			A: 0xXXXXXXXX
			D: 0xXXXXXXXX

	-Read the data from the memory location provided
		-Command:
			C: 0x00000002
			A: 0x????????
			D: 0xXXXXXXXX
		-Response:
			S: 0xFFFFFFFD
			A: 0x????????
			D: 0x????????
	
	-Write streaming data to consecutive addresses
		-Command:
			C: 0x00000003
			A: 0x????????
			D: 0x########
			(######## count of 32 bit words to follow)
			D: 0x???????? 
			(...) 
		-Response:
			S: 0xFFFFFFFC
			A: 0x????????
			D: 0x#########

	-Write streaming data to the same addresss
		-Command:
			C: 0x00000004
			A: 0x????????
			D: 0x########
			(0x######## count of 32 bit words to follow)
			D: 0x???????? 
			(...) 
		-Response:
			S: 0xFFFFFFFB
			A: 0x????????
			D: 0x#########

	-Read streaming data from consecutive addresses
		-Command:
			C: 0x00000005
			A: 0x????????
			D: 0x########
			(######## count of 32 bit words to follow)
		-Response:
			S: 0xFFFFFFFA
			A: 0x????????
			D: 0x########
			(0x######## count of 32 bit words to follow
			D: 0x????????

	-Read streaming data from the same address
		-Command:
			C: 0x00000006
			A: 0x????????
			D: 0x########
			(######## count of 32 bit words to follow)
		-Response:
			S: 0xFFFFFFF9
			A: 0x????????
			D: 0x########
			(0x######## count of 32 bit words to follow
			D: 0x????????

	-Read/Write Master Flags
		-Command:
			C: 0x00000007
			A: 0xMMMMMMMM (mask, set all to 0 for reading)
			D: 0xWWWWWWWW (flag)
		-Response:
			S: 0xFFFFFFF8
			A: 0xMMMMMMMM (mask reflected back)
			D: 0xRRRRRRRR (returned flag value)

		-Details:
			-(bit 0): a read on the interrupt register will clear the registers
				- 1 : enable auto clearing
				- 0 : disable auto clearing

	-Read/Write Interrupt Control
		-Command:
			C: 0x00000008
			A: 0xMMMMMMMM (mask) 
			D: 0xWWWWWWWW (en)
		-Response:
			S: 0xFFFFFFF8
			A: 0xXXXXXXXX (mask)
			D: 0xRRRRRRRR (set)


UART io handler
UART input handler
	-decode incomming data
	-all ASCII format (this is for debug), set size

	-initial proposed format

		'LNNNNNNNXXXXXXXXYYYYYYYYZZZZZZZZ'

            N: number of data bytes to send after word
                size: 24 bits
			X: command
				size: 32 bits
			Y: address
				size: 32 bits
			Z: data
				size: 32 bits
UART output handler
	-format outgoing data
	
	-initial proposed format
		'SXXXXXXXXYYYYYYYYZZZZZZZZM...'
			X: status
				size: 32 bits
			Y: address
				size: 32 bits
			Z: data
            M: added data bytes (from a stream read)


UART example exchange:

-ping the device
	L0000000000000000000000000000000
-response
	SFFFFFFFF0000000000011EAF

-read from address 0x00000001 (this address corresponds to the DRT offset 1 or the number of devices attached to the bus)
	L0000000000000020000000100000000
-response
	SFFFFFFFD0000000100000001 (reading from address 1 from the DRT says there is 1 slave attached to the bus)

-write the address 0x01000000 with a value of 0xFFFFFFFF (in the 2 slave example this corresponds to actually writing 0xFFFFFFFF to the GPIO values, or turning them all on)
	L00000000000000101000000FFFFFFFF
-response
	SFFFFFFFE01000000FFFFFFFF

